package leetcode.s101_200;

import java.util.LinkedList;
import java.util.Queue;

public class leetcode_200 {

    class Island {
        char val;
        int x;
        int y;
        Island(char val, int x, int y) {
            this.val = val;
            this.x = x;
            this.y = y;
        }
    }


    public boolean safe(int x, int y, int row, int column) {
        return (x>=0 && y>=0 && x<row && y<column);
    }

    public void bfs(int i, int j, char[][] grid, int row, int column) {
        Queue<Island> q = new LinkedList<>();
        q.add(new Island(grid[i][j], i, j));

        while (!q.isEmpty()) {
            Island island = q.remove();
            // find the children now

            int[][] d = new int[][]{{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
            for(int k=0;k<d.length;k++){
                int x = island.x + d[k][0];
                int y = island.y + d[k][1];
                if(safe(x, y, row, column) && grid[x][y] == '1') {
                    q.add(new Island(grid[x][y], x, y));
                }
            }
            grid[island.x][island.y] = '0';
        }
        grid[i][j] = '0';
    }

    public int numIslands(char[][] grid) {
        int count = 0;
        int row = grid.length;
        int column = 0;
        for(int i=0;i<grid[0].length;i++) {
            column++;
        }

        for(int i=0;i<row;i++) {
            for(int j=0;j<column;j++) {
                char c = grid[i][j];
                if(c == '1') {
                    grid[i][j] = '0';
                    count++;
                }

            }
        }

        return count;
    }

    public void solve() {
//        char[][] grid = new char[][]{{'1','1','1','1','0'},{'1','1','0','1','0'},{'1','1','0','0','0'},{'0','0','0','0','0'}};
        char[][] grid = new char[][]{
                {'1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','0','1','0','1','1'},
                {'0','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','0'},
                {'1','0','1','1','1','0','0','1','1','0','1','1','1','1','1','1','1','1','1','1'},
                {'1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
                {'1','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
                {'1','0','1','1','1','1','1','1','0','1','1','1','0','1','1','1','0','1','1','1'},
                {'0','1','1','1','1','1','1','1','1','1','1','1','0','1','1','0','1','1','1','1'},
                {'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','1','1'},
                {'1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1'},
                {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
                {'0','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1'},
                {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
                {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
                {'1','1','1','1','1','0','1','1','1','1','1','1','1','0','1','1','1','1','1','1'},
                {'1','0','1','1','1','1','1','0','1','1','1','0','1','1','1','1','0','1','1','1'},
                {'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','0'},
                {'1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','0'},
                {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
                {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
                {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'}
        };
//        char[][] grid = new char[][]{{'1','1','0','0','0'},{'1','1','0','0','0'},{'0','0','1','0','0'},{'0','0','0','1','1'}};
//        char[][] grid = new char[][]{{'1'}};


        System.out.println(numIslands(grid));;
    }

    public static void main(String[] args) {
        leetcode_200 t = new leetcode_200();
        t.solve();
    }
}